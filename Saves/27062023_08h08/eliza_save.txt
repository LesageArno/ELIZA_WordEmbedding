import logging
import random
import re
from collections import namedtuple
import os.path as osp
import time
from WE_vectorial_comparison_class import VecorialComparison as WEvec

# Fix Python2/Python3 incompatibility
try: input = raw_input
except NameError: pass

log = logging.getLogger(__name__)


class Key:
    def __init__(self, word, weight, decomps):
        self.word = word
        self.weight = weight
        self.decomps = decomps


class Decomp:
    def __init__(self, parts, save, reasmbs):
        self.parts = parts
        self.save = save
        self.reasmbs = reasmbs
        self.next_reasmb_index = 0

class Action:
    no = 0
    def __init__(self, trigger:list, actuator:list, trigfunction:str):
        self.trigger = trigger
        self.actuator = actuator
        self.trigfunction = trigfunction
        Action.no += 1




class Eliza:
    def __init__(self):
        self.initials = []
        self.finals = []
        self.quits = []
        self.action = {}
        self.pres = {}
        self.posts = {}
        self.synons = {}
        self.keys = {}
        self.memory = []
        
    def initialize(self):
        #Initialisation WE : 
        if not osp.exists("word_embeded_dict.pkl"):
            with open("WEdict_creator.py","r") as creator: #On créer le dictionnaire s'il n'existe pas
                logging.info("Downloading additional files...")
                print("Downloading additional files...")
                time.sleep(1.5)
                exec(creator.read())
                print("###############################################################################\n\n###############################################################################") 
                logging.info("Succes")
        logging.info("Loading files...") #Dans tous les cas, on charge le dictionnaire
        self.word2vec = WEvec("word_embeded_dict.pkl") 
        logging.info("Succes")
        print("###############################################################################\n\n###############################################################################") 

        logging.info(f"Session du {time.localtime()}")

    def load(self, path): 
        key = None
        decomp = None
        with open(path) as file: #Permet d'interpréter le fichier doctor.txt
            for line in file:
                if not line.strip(): #Pour chaque ligne, si ce n'est pas un espace ou un \n, on continue le programme
                    continue
                tag, content = [part.strip() for part in line.split(':')] #Permet de sparer la règle du contenu
                if tag == 'initial':
                    self.initials.append(content) #Règle débute la conversation
                elif tag == 'final':
                    self.finals.append(content) #Règle fin de conversation
                elif tag == 'quit': 
                    self.quits.append(content) #Règle déclancheuse de fin
                elif tag == 'pre':
                    parts = content.split(' ') #Règle de présubstitution
                    self.pres[parts[0]] = parts[1:]
                elif tag == 'post':
                    parts = content.split(' ') #Règle de postsubstitution
                    self.posts[parts[0]] = parts[1:]
                elif tag == 'synon':
                    parts = content.split(' ') #Règle de synonymes (défini les familles de mots)
                    self.synons[parts[0]] = parts

                elif tag == 'key': #Règle mot déclancheur (mot important pour le programme)
                    parts = content.split(' ')
                    word = parts[0]
                    weight = int(parts[1]) if len(parts) > 1 else 1
                    key = Key(word, weight, [])
                    self.keys[word] = key       
                elif tag == 'decomp': #Règle de décomposition (patrons)
                    parts = content.split(' ')
                    save = False
                    if parts[0] == '$': #S'il y a un $, nous pouvons le stocker en mémoire 
                        save = True
                        parts = parts[1:]
                    decomp = Decomp(parts, save, [])
                    key.decomps.append(decomp)
                elif tag == 'reasmb':
                    parts = content.split(' ') #Règle d'assemblage de la phrase de réponse à partir du patron
                    decomp.reasmbs.append(parts)

                elif tag == 'action':
                    action = Action([],[],"") #Règle de création d'un trigger
                    self.action["A"+str(Action.no)] = action
                elif tag == 'trigger':
                    parts = content.strip() #Règle du mot déclancheur
                    action.trigfunction = parts if parts == 'final' else None #Si le mot déclancheur est dirigé par la fonction final, on l'indique
                    trig_seq = True
                elif tag == 'actuator': #Règle de l'actionneur
                    trig_seq = False
                elif tag == 'seq': #Règle de renvoie de l'actionneur
                    if trig_seq:
                        action.trigger.append(content.lower())
                    else:
                        action.actuator.append(content)

    def _match_decomp_r(self, parts, words, results):
        if not parts and not words: # Si il n'y a pas de patrons ni de mots, on renvoie True
            return True
        if not parts or (not words and parts != ['*']): #Si il y a un patron et des mots ou que le premier est [*] alors on renvoie False
            return False
        if parts[0] == '*':
            for index in range(len(words), -1, -1):
                results.append(words[:index])
                if self._match_decomp_r(parts[1:], words[index:], results):
                    return True
                results.pop() 
            return False
        elif parts[0].startswith('@'):
            root = parts[0][1:]
            if not root in self.synons:
                raise ValueError("Unknown synonym root {}".format(root))
            if not words[0].lower() in self.synons[root]:
                return False
            results.append([words[0]])
            return self._match_decomp_r(parts[1:], words[1:], results)
        elif parts[0].lower() != words[0].lower():
            return False
        else:
            return self._match_decomp_r(parts[1:], words[1:], results)

    def _match_decomp(self, parts, words): #Vérificatteur de matchs
        results = []
        if self._match_decomp_r(parts, words, results):
            return results
        return None

    def _next_reasmb(self, decomp):
        index = decomp.next_reasmb_index
        result = decomp.reasmbs[index % len(decomp.reasmbs)]
        decomp.next_reasmb_index = index + 1
        return result

    def _reassemble(self, reasmb, results):
        output = []
        for reword in reasmb:
            if not reword:
                continue
            if reword[0] == '(' and reword[-1] == ')':
                index = int(reword[1:-1])
                if index < 1 or index > len(results):
                    raise ValueError("Invalid result index {}".format(index))
                insert = results[index - 1]
                for punct in [',', '.', ';']:
                    if punct in insert:
                        insert = insert[:insert.index(punct)]
                output.extend(insert)
            else:
                output.append(reword)
        return output

    def _sub(self, words, sub): #Fonction de substitution
        output = []
        for word in words:
            word_lower = word.lower() #On transforme chaque mot de telle sortes qu'ils soient tous en minuscules
            if word_lower in sub:
                output.extend(sub[word_lower]) #On applique la substituion s'il y en a une
            else:
                output.append(word) #Sinon on remet le mot de départ dans la liste renvoyé
        return output

    def _match_key(self, words, key):
        for decomp in key.decomps: #Pour chaques patrons
            results = self._match_decomp(decomp.parts, words) #On verifie s'il y en a un qui marche (match)
            if results is None:
                log.debug('Decomp did not match: %s', decomp.parts)
                continue
            log.debug('Decomp matched: %s', decomp.parts)
            log.debug('Decomp results: %s', results)
            results = [self._sub(words, self.posts) for words in results]
            log.debug('Decomp results after posts: %s', results)
            reasmb = self._next_reasmb(decomp)
            log.debug('Using reassembly: %s', reasmb)
            if reasmb[0] == 'goto':
                goto_key = reasmb[1]
                if not goto_key in self.keys:
                    raise ValueError("Invalid goto key {}".format(goto_key))
                log.debug('Goto key: %s', goto_key)
                return self._match_key(words, self.keys[goto_key])
            output = self._reassemble(reasmb, results)
            if decomp.save:
                self.memory.append(output)
                log.debug('Saved to memory: %s', output)
                continue
            return output
        return None

    def respond(self, text: str):
        if text.lower() in self.quits: #Si le mot est dans quits on retourne None
            return None

        for key in self.action.keys(): #Pour chaque actions
            if text.lower() in self.action.get(key).trigger: #Si la phrase est dans un trigger
                if self.action.get(key).trigfunction == 'final':
                    return "quit:"+random.choice(self.action.get(key).actuator) #Si la phrase est de param final, on quitte le code en renvoyant l'actionneur
                else: return random.choice(self.action.get(key).actuator) #On renvoie l'actionneur

        text = re.sub(r'\s*\.+\s*', ' . ', text) #Transforme les ",,;;;...." en " ,  ;  . "
        text = re.sub(r'\s*,+\s*', ' , ', text)
        text = re.sub(r'\s*;+\s*', ' ; ', text)
        log.debug('After punctuation cleanup: %s', text)

        words = [w for w in text.split(' ') if w] #Créé une liste de string <=> text.split(' ') dans la plupart des cas
        log.debug('Input: %s', words)

        words = self._sub(words, self.pres) #On exécute la pré-substitution
        log.debug('After pre-substitution: %s', words)

        keys = [self.keys[w.lower()] for w in words if w.lower() in self.keys] #Pour chaque mot, on regarde s'ils sont clés, si c'est le cas, on l'enregistre, A MODIFIER POUR LE WIKI2VEC
        keys = sorted(keys, key=lambda k: -k.weight) #Liste dans l'ordres des clés par poids
        log.debug('Sorted keys: %s', [(k.word, k.weight) for k in keys])

        output = None

        for key in keys: #Pour chaques clés dans la liste
            output = self._match_key(words, key)
            if output:
                log.debug('Output from key: %s', output)
                break
        if not output:
            if self.memory:
                index = random.randrange(len(self.memory))
                output = self.memory.pop(index)
                log.debug('Output from memory: %s', output)
            else:
                output = self._next_reasmb(self.keys['xnone'].decomps[0])
                log.debug('Output from xnone: %s', output)

        return " ".join(output)

    def initial(self): #Fonction du début de la conversation
        return random.choice(self.initials)

    def final(self): #Fonction de la fin de la conversation
        return random.choice(self.finals)

    def run(self): #Fonction qui lance le code Eliza
        print(self.initial()) #Introduction

        while True:
            sent = input('> ')
            output = self.respond(sent) #Analyse de la réponse de l'utilisateur et réponse approprié
            if output is None: #Si l'utilisateur met un mot de quits alors on quitte la séance
                break
            if output.startswith('quit:'): #S'il s'agit d'un trigger final, on quitte sans plus attendre 
                print(output[5:])
                exit()
            print(output) #On renvoie la réponse à l'utilisateur

        print(self.final())
        

def main(): #Lancement d'Eliza
    eliza = Eliza()
    eliza.load('doctor.txt')
    eliza.initialize()
    eliza.run()

if __name__ == '__main__':
    logging.basicConfig(filename="Elizalog.log",level=logging.DEBUG,encoding='utf-8') #On génère un log d'eliza
    main()
